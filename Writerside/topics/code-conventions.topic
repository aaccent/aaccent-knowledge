<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Соглашения по коду" id="code-conventions">
    <show-structure for="chapter, def" depth="3"/>

    <title>Соглашения по коду</title>

    <p>
        Здесь описаны соглашения по коду, структурам и ведению репозитория.
        Описанное касается в основном верстки, фронта и другого JS кода.
    </p>

    <chapter title="Файловая структура" id="file-structure">
        <p>
            Структура построена с наименьшим вложением в глубину для упрощения навигаций и ссылок.
            Создание новых подпапок без согласования допускается в:
        </p>

        <list>
            <li><path>root</path></li>
            <li><path>assets</path></li>
            <li><path>page-components</path></li>
            <li><path>pages</path></li>
            <li><path>layout</path></li>
            <li><path>app</path></li>
            <li><path>ui</path></li>
        </list>

        <p>
            В остальных подпапки могут создавать только с согласованием команды,
            т.к. возможно вам не нужна новая подпапка.
        </p>

        <p>Структуры верстки/фронта:</p>

        <tabs>
            <tab title="Верстка">
                <code-block>
                    layout-project-root/
                    └── src/
                        ├── assets/
                        │   ├── content
                        │   ├── static
                        │   └── icons
                        ├── components
                        ├── global
                        ├── layout/
                            └── utils
                        ├── features
                        ├── pages
                        ├── styles/
                            ├── general
                            └── utils
                        ├── scripts
                        └── ui/
                            ├── buttons
                            ├── cards
                            ├── popups
                            └── inputs
                </code-block>
            </tab>
            <tab title="Next приложение">
                <code-block>
                    next-project-root/
                    ├── public
                    └── src/
                        ├── app
                        ├── assets/
                        │   ├── static
                        │   ├── content
                        │   └── icons
                        ├── components
                        ├── global
                        ├── layout
                        ├── features
                        ├── page-components
                        ├── styles
                        ├── types
                        └── ui/
                            ├── buttons
                            ├── cards
                            ├── popups
                            └── inputs
                </code-block>
            </tab>
        </tabs>

        <deflist>
            <def title="src">
                В корне проекта всегда есть папка <path>src</path> для
                отделения кода от конфигурационных файлов проекта
            </def>

            <def title="assets">
                <p>
                    Директория хранит в себе фотографии, видео и другие статические данные.
                    Содержит три постоянных папки:
                </p>

                <list>
                    <li>
                        <path>assets/content</path> — Фотографии/видео для вывода на этапе разметки, но не реальном сайте.
                        Например, обложки статей
                    </li>
                    <li>
                        <path>assets/static</path> — Фотографии/видео, которые попадут на реальный сайт.
                        Например, логотип, декоративный фон секций
                    </li>
                    <li>
                        <path>assets/icon</path> — Статические иконки телефонов, меток на карте и других ui элементов.
                        Зачастую должны быть в <code>*.svg</code> формате
                    </li>
                </list>

                <tip>
                    Помимо постоянных, могут создаваться дополнительные папки, свойственные только проекту.
                    Например папка <path>assets/data</path> для хранения <code>json</code> данных
                </tip>
            </def>

            <def title="components">
                <p>
                    Содержит в себе компоненты, используемые на более чем одной странице.
                </p>

                <warning>
                    Все компоненты должны быть в своих папках.
                    Не должно быть группирующих подпапок, например <path>components/page-blocks</path>.
                </warning>
                <warning>
                    Если компонент используется только на одной странице, то его не должно быть в этой папке.
                </warning>
            </def>

            <def title="features">
                Папка с функционалом используемым между проектами или по всему сайту.
                Например: попапы, анимации, преобразования текстов, подключения библиотек.
            </def>

            <def title="global">
                Папка содержит скрипты, компоненты, которые нельзя прировнять ни к одной из категорий.
                Например: апи, константы, переиспользуемые переменные.
            </def>

            <def title="layout">
                <p>
                    Содержит компоненты с шаблонами страниц, шапкой, футером, контейнерами, общей разметкой секций и блоков.
                </p>
                <p>В верстке имеет дополнительную папку <path>utils</path> с миксинами и утилитами</p>
            </def>

            <def title="pages и page-components">
                <p>
                    В верстке <path>pages</path> содержит шаблон, скрипты, стили и папку <path>components</path>
                    для компонентов, которые используются только на этой странице.
                </p>

                <p>
                    В next <path>page-components</path> приложении содержит компоненты, которые экспортируются
                    в папку <path>app</path> или <path>pages</path> в зависимости от версии
                </p>

                <p>
                    Пример структуры страницы с локальным компонентом <code>some-component</code>:
                </p>

                <code-block>
                    src/
                    └── pages/
                        └── main-page/
                        ├── components/
                        │   └── some-component/
                        │       └── some-component.js
                        ├── page.js
                        ├── page.scss
                        └── page.pug
                </code-block>
            </def>

            <def title="styles">
                <p>Содержит глобальные стили, не может содержать стилей от компонентов или страниц.</p>

                <p>В верстке имеет две постоянных подпапки:</p>
                <list>
                    <li>
                        <path>styles/general</path> — содержит общие для сайта файлы стилей
                    </li>
                    <li>
                        <path>styles/utils</path> — содержит файлы с миксинами и утилитами
                    </li>
                </list>
            </def>

            <def title="scripts">
                Содержит глобальные скриптов, не может содержать скриптов от компонентов или страниц.
            </def>

            <def title="types">
                Содержит глобальные переиспользуемые типы от <code>typescript</code>.
                Не может содержать типы от компонентов или страниц.
            </def>

            <def title="ui">
                Содержит компоненты кнопок, текстов, карточек, попапов.
                Помимо постоянных папок могут создаваться новые группы, свойственные только проекту
            </def>
        </deflist>
    </chapter>

    <chapter title="Наименования файлов" id="naming-files">
        <chapter title="React компоненты" id="naming-files-react-components">
            <p>
                Компоненты нужно наименовать в
                <a href="https://www.theserverside.com/definition/Pascal-case">PascalCase</a> —
                первая буква каждого слова в верхнем регистре, без тире и нижних подчеркиваний.
            </p>
            <p>
                Если компонент находится в своей папке, то файл компонента должен называться так-же, как и папка.
            </p>
            <p>
                Если компонент имеет свои типы, хуки или контексты, которые нужно вынести в отдельный файл,
                то именовать нужно по шаблонам:
            </p>
            <list>
                <li><code>&lt;ComponentName&gt;.hooks.jsx</code> — для хуков</li>
                <li><code>&lt;ComponentName&gt;.contexts.jsx</code> — для контекстов</li>
                <li><code>&lt;ComponentName&gt;.types.jsx</code> — для типов</li>
            </list>
            <control>Пример структуры:</control>
            <code-block>
                components/
                └── ComponentName/
                    ├── ComponentName.tsx
                    ├── ComponentName.types.ts
                    └── ComponentName.hooks.ts
            </code-block>
            <tip>
                <control>Почему не <path>index.tsx</path></control>
                <p>
                    Если открывать файлы в редакторе, то отображается его название.
                    Из-за <path>index.*</path> непонятно какой из них нужный.
                </p>
                <p>
                    IDE могут решать эту проблему, добавляя название директории,
                    но в инспекторе элементов и консоли такой возможности нет
                </p>
            </tip>
            <note>
                <control>У меня много крючков</control>
                <p>
                    Если много крупных хуков у компонента, то можно применить шаблон для наименования —
                    <code>&lt;ComponentName&gt;-&lt;hook-name&gt;.hook.jsx</code>
                </p>
            </note>
        </chapter>

        <chapter title="Компоненты верстки" id="naming-files-layout-components">
            <p>
                Компоненты нужно наименовать в <a href="https://developer.mozilla.org/en-US/docs/Glossary/Kebab_case">kebab-case</a>
                — всё в нижнем регистре, каждое слово разделено через тире.
            </p>
            <p>
                Если компонент находится в своей папке, то файл, стили и скрипты компонента должен называться так-же, как и папка.
            </p>
            <control>Пример структуры:</control>
            <code-block>
                components/
                └── component-name/
                    ├── component-name.pug
                    ├── component-name.js
                    └── component-name.scss
            </code-block>
        </chapter>

        <chapter title="Страницы верстки" id="naming-files-layout-pages">
            <p>
                Страницы верстки должны наименоваться по правилам:
            </p>
            <list>
                <li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Kebab_case">kebab-case</a></li>
                <li>Не использовать слово "page"</li>
                <li>
                    Не использовать похожие названия для двух страниц:
                    <tabs>
                        <tab title="Неправильно">
                            <warning>
                                <control>Используются сложно отличимые названия</control>
                                <code-block lang="">
                                    pages/
                                    ├── category/
                                    │   └── category.pug
                                    ├── categories/
                                    │   └── categories.pug
                                    ├── service/
                                    │   └── service.pug
                                    └── services/
                                        └── services.pug
                                </code-block>
                            </warning>
                        </tab>
                        <tab title="Правильно">
                            <note>
                                <control>Используются легко отличимые названия</control>
                                <code-block lang="">
                                    pages/
                                    ├── category-item/
                                    │   └── category-item.pug
                                    ├── categories-list/
                                    │   └── categories-list.pug
                                    ├── service-item/
                                    │   └── service-item.pug
                                    └── services-list/
                                        └── services-list.pug
                                </code-block>
                            </note>
                        </tab>
                    </tabs>
                </li>
            </list>
            <p>
                Если у страницы есть свои стили или скрипты, то их нужно называть так-же, как и страницу
            </p>
        </chapter>
    </chapter>

    <chapter title="Наименования переменных" id="naming-variables">
        <chapter title="Общее" id="naming-general">
            <list>
                <li>Названия обычных переменных пишутся в <code>camelCase</code></li>
                <li>
                    <p>Не использовать сокращения, которые "экономят" 2-5 буквы</p>

                    <warning>
                        <code-block lang="javascript">
                            const btn = ''
                            const ctx = ''
                        </code-block>
                    </warning>

                    <note>
                        <code-block lang="javascript">
                            const button = ''
                            const context = ''
                        </code-block>
                    </note>
                </li>
            </list>
        </chapter>

        <chapter title="Константы" id="naming-variables-constants">
            <p>
                У переменных со значениями, которые известным в момент создания переменной,
                названия нужно писать в <code>SCREAMING_SNAKE_CASE</code> -
                все буквы в верхнем регистре, между словами нижнее подчеркивание
            </p>
            <p>
                Если это объект с картой значений, то параметры объекта должны быть в
                <a href="https://en.wikipedia.org/wiki/Snake_case"><code>SCREAMING_SNAKE_CASE</code></a>
            </p>

            <code-block lang="javascript">
                const SOME_VARIABLE = "value"

                const ROUTES = {
                    CATALOG: 'catalog',
                    PROFILE: 'profile',
                }
            </code-block>
        </chapter>

        <chapter title="Typescript" id="naming-variables-typescript">
            <chapter title="Интерфейсы и Типы" id="ts-types-interfaces">
                <p>
                    Все интерфейсы и типы должны писаться в <code>PascalCase</code>
                </p>

                <warning>
                    Не нужно использовать слова <code>type</code>, <code>interface</code>
                    или ставить <code>I</code> вначале названия.

                    <code-block lang="typescript">
                        type FancyType = string | number

                        interface IFancyName = {
                            a: number
                            b: string
                        }
                    </code-block>
                </warning>

                <code-block lang="typescript">
                    type SomeName = string | number

                    interface FancyName = {
                        a: number
                        b: string
                    }
                </code-block>
            </chapter>

            <chapter title="Карта значений" id="ts-map-values">
                <p>
                    Допустим вы создаёте карту значений на JS
                </p>

                <code-block lang="typescript">
                    const ROUTES = {
                        CATALOG: 'catalog',
                        PROFILE: 'profile',
                    } as const
                </code-block>

                <p>
                    И далее вы создаёте тип со значениями этого объекта.
                    Название такой переменной не должно быть в множественном числе, как карта значений.
                    Он должно быть в единичном, т.к. при использовании мы присваиваем только одно значение.
                </p>

                <note>
                    <p>Название переменной в единичном числе</p>

                    <code-block lang="typescript">
                        type Route = typeof ROUTES[keyof typeof ROUTES]
                    </code-block>
                </note>

                <warning>
                    <p>Название переменной в множественном числе</p>

                    <code-block lang="typescript">
                        type Routes = typeof ROUTES[keyof typeof ROUTES]
                    </code-block>
                </warning>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Структура кода" id="code-structure">
        <chapter title="Функции JS" id="code-structure-functions">
            <p>
                JavaScript позволяет вызывать функции до их объявления.
                Такое поведение может путать, поэтому все функции должны использоваться после их объявления.
            </p>

            <p>
                Подобное касается React компонентов. Функции внутри компонентов должны объявляться в начале компонента
            </p>

            <tabs>
                <tab title="Не правильно">
                    <warning>
                        <p><code>output()</code> используется до его объявления</p>

                        <code-block lang="javascript">
                            import React from 'react'

                            export default function Component() {
                            return &lt;ul&gt;{output([1,2,3])}&lt;/ul&gt;

                            function output(list) {
                            return list.map(i => &lt;li&gt;{i}&lt;/li&gt;)
                            }
                            }
                        </code-block>
                    </warning>
                </tab>
                <tab title="Правильно">
                    <note>
                        <p><code>output()</code> объявлен перед использованием</p>

                        <code-block lang="javascript">
                            import React from 'react'

                            export default function Component() {
                            function output(list) {
                            return list.map(i => &lt;li&gt;{i}&lt;/li&gt;)
                            }

                            return &lt;ul&gt;{output([1,2,3])}&lt;/ul&gt;
                            }
                        </code-block>
                    </note>
                </tab>
            </tabs>

            <tip>
                <p>Если возможно, то функции нужно выводить вне компонента</p>

                <code-block lang="javascript">
                    import React from 'react'

                    function output(list) {
                    return list.map(i => &lt;li&gt;{i}&lt;/li&gt;)
                    }

                    export default function Component() {
                    return &lt;ul&gt;{output([1,2,3])}&lt;/ul&gt;
                    }
                </code-block>
            </tip>
        </chapter>

        <chapter title="Разметка" id="code-structure-layout">
            <p>В атрибутах разметки <code>class</code> всегда должен быть первым</p>
            <code-block lang="html">
                &lt;div class="block"&gt;
                    &lt;a class="block__link" href="#"&gt;some-link&lt;/a&gt;
                &lt;/div&gt;
            </code-block>
        </chapter>

        <chapter title="Стили" id="styles">
            <chapter title="Порядок" id="styles-order">
                <p>
                    При написании стилей в tailwind или css, параметры нужно сортировать по порядку:
                </p>
                <tabs>
                    <tab title="CSS/SCSS">
                        <list type="decimal">
                            <li><code>content</code></li>
                            <li>
                                Позиционирование:
                                <code>position</code>,
                                <code>translate</code>,
                                <code>left</code>,
                                <code>top</code> и т.д
                            </li>
                            <li>
                                Отступы:
                                <code>margin</code>,
                                <code>padding</code>
                            </li>
                            <li>
                                Размеры:
                                <code>width</code>,
                                <code>maw-width</code>,
                                <code>height</code>,
                                <code>maw-height</code>,
                                <code>scale</code>
                            </li>
                            <li>
                                Расположение:
                                <code>display</code>
                                <code>flex</code>
                                <code>flex-shrink</code>
                                <code>align-items</code>
                                <code>justify-item</code>
                                <code>justify-self</code>
                                <code>gap</code>
                            </li>
                            <li>
                                Визуальное:
                                <code>background</code>,
                                <code>background-position</code>,
                                <code>border</code>
                                <code>border-radius</code>
                                <code>object-fit</code>,
                                <code>overflow</code>
                                <code>caret-color</code>
                            </li>
                            <li>
                                Текст:
                                <code>text-transform</code>,
                                <code>font</code>,
                                <code>text-align</code>
                            </li>
                            <li>
                                Состояния:
                                <code>cursor</code>,
                                <code>transition</code>,
                            </li>
                        </list>
                    </tab>
                    <tab title="Tailwind">
                        <list type="decimal">
                            <li>
                                Объявление группы или родственника:
                                <code>group</code>
                                <code>group/name</code>
                                <code>peer</code>
                                <code>peer/name</code>
                            </li>
                            <li><code>content</code></li>
                            <li>
                                Позиционирование:
                                <code>absolute</code>,
                                <code>relative</code>,
                                <code>translate</code>,
                                <code>z</code>,
                                <code>left</code>,
                                <code>top</code> и т.д
                            </li>
                            <li>
                                Отступы:
                                <code>m</code>,
                                <code>p</code>
                            </li>
                            <li>
                                Размеры:
                                <code>size</code>,
                                <code>w</code>,
                                <code>maw-w</code>,
                                <code>h</code>,
                                <code>maw-h</code>,
                                <code>scale</code>
                            </li>
                            <li>
                                Расположение:
                                <code>block</code>
                                <code>flex</code>
                                <code>shrink</code>
                                <code>items-center</code>
                                <code>justify-between</code>
                            </li>
                            <li>
                                Визуальное:
                                <code>bg</code>,
                                <code>bg-bottom</code>,
                                <code>border</code>
                                <code>divide</code>
                                <code>object-cover</code>,
                                <code>overflow</code>
                                <code>caret</code>
                            </li>
                            <li>
                                Текст:
                                <code>uppercase</code>,
                                <code>text</code>,
                                <code>text-center</code>
                            </li>
                            <li>
                                Состояния:
                                <code>cursor</code>,
                                <code>placeholder:</code>,
                                <code>hover:</code>,
                                <code>disabled:</code>,
                            </li>
                            <li>
                                <code>before:</code>
                                <code>after:</code>
                            </li>
                            <li>Медиа запросы</li>
                        </list>
                    </tab>
                </tabs>
                <note>
                    <p>
                        Порядок классов при медиа запросах в Tailwind действует такой-же, как и при обычных стилях
                    </p>

                    <code-block lang="html">
                        &lt;div class="
                        absolute
                        left-0
                        top-0
                        p-[5px]
                        m-[5px]
                        w-[10px]
                        h-[5px]
                        block
                        md:relative
                        md:top-1
                        md:m-[10px]
                        "&gt;&lt;/div&gt;
                    </code-block>

                    <emphasis>Подобное форматирование классов применено только в целях удобной демонстрации</emphasis>
                </note>
            </chapter>

            <chapter title="Наименования" id="styles-naming">
                <p>
                    Наименования классов происходит согласно <a href="https://ru.bem.info/">BEM</a>, но с изменениями:
                </p>
                <list>
                    <li>
                        <p>
                            Классы, которые описывают вариации элемента, именуются согласно BEM, но
                            вместо нижнего подчеркивания (<code>_</code>) используются два тире (<code>--</code>)
                        </p>
                        <tabs>
                            <tab title="Согласно BEM">
                                <code>block__element_modifier</code>
                            </tab>
                            <tab title="Стиль Two Dashes">
                                <code>block__element--modifier</code>
                            </tab>
                        </tabs>
                    </li>
                    <li>
                        <p>
                            Классы или Булевые модификаторы, которые описывают состояние элемента, именуются без блока и элемента.
                        </p>
                        <tabs>
                            <tab title="Согласно BEM">
                                <code>block__element_active</code>
                            </tab>
                            <tab title="Стиль No-namespace">
                                <code>block__element _active</code>
                            </tab>
                        </tabs>
                        <tip>
                            <control>Зачем?</control>
                            <p>
                                Это упрощает использование классов в JS.
                                Не нужно писать огромные классы для изменения активного состояния.
                            </p>
                        </tip>
                    </li>
                </list>
            </chapter>
        </chapter>

        <chapter title="Импорты" id="code-structure-imports">
            <p>Импорты модулей в JS/TS нужно сортировать по порядку:</p>
            <list type="decimal">
                <li>
                    <p>Импорты из сторонних библиотек</p>
                    <code-block lang="javascript">
                        import React from "react"
                        import Image from "next/Image"
                        import { Slider } from "swiper"
                    </code-block>
                </li>
                <li>
                    <p>Импорты компонентов, блоков, ui элементов</p>
                    <code-block lang="javascript">
                        import Popup from "features/popup"
                        import Input from "ui/inputs/Input"
                        import Container from "layout/Container"
                        import Contacts from "components/Contacts"
                    </code-block>
                </li>
                <li>
                    <p>Импорты функционала, утилит, обработчиков:</p>
                    <code-block lang="javascript">
                        import { getCity } from "globals/api"
                        import { parseText } from "globals/text"
                        import { ThemeContext } from "features/theme"
                    </code-block>
                </li>
                <li>
                    <p>Импорты типов, констант</p>
                    <code-block lang="typescript">
                        import { ROUTES } from "globals/api"
                        import type { Route } from "globals/api"
                        import type { Props as ContactsProps } from "components/Contacts"
                    </code-block>
                </li>
                <li>
                    <p>Импорты файлов и стилей</p>
                    <code-block lang="javascript">
                        import phoneIcon from "assets/icon/phone.svg"
                        import styles from "./Contacts.styles.scss"
                    </code-block>
                </li>
            </list>

            <control>Общие правила:</control>
            <list>
                <li>Сортировать внутри категорий нужно по длине строки.</li>
                <li>Между категориями должна быть пустая строка.</li>
                <li>
                    Если импортируется компонент и его тип, то компонент должен быть в своей категории, а тип в своей.
                    Если импортируется компонент и его константа, константа импортируется вместе с компонентом.
                </li>
            </list>

            <code-block lang="typescript" collapsible="true">
                import React from "react"
                import Image from "next/Image"
                import { Slider } from "swiper"

                import Popup from "features/popup"
                import Input from "ui/inputs/Input"
                import Container from "layout/Container"
                import Contacts from "components/Contacts"

                import { getCity } from "globals/api"
                import { parseText } from "globals/text"
                import { ThemeContext } from "features/theme"

                import { ROUTES } from "globals/api"
                import type { Route } from "globals/api"
                import type { Props as ContactsProps } from "components/Contacts"

                import phoneIcon from "assets/icon/phone.svg"
                import styles from "./Contacts.styles.scss"
            </code-block>
        </chapter>
    </chapter>
</topic>